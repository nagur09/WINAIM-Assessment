--Data Base Schema 

CREATE TABLE Departments (
    DepartmentID INT PRIMARY KEY AUTO_INCREMENT,
    DepartmentName VARCHAR(100) NOT NULL
);

CREATE TABLE Roles (
    RoleID INT PRIMARY KEY AUTO_INCREMENT,
    RoleName VARCHAR(100) NOT NULL
);

CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY AUTO_INCREMENT,
    FirstName VARCHAR(100) NOT NULL,
    LastName VARCHAR(100) NOT NULL,
    Email VARCHAR(100) UNIQUE NOT NULL,
    Phone VARCHAR(20),
    HireDate DATE NOT NULL,
    DepartmentID INT,
    RoleID INT,
    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID),
    FOREIGN KEY (RoleID) REFERENCES Roles(RoleID)
);

CREATE TABLE PerformanceReviews (
    ReviewID INT PRIMARY KEY AUTO_INCREMENT,
    EmployeeID INT,
    ReviewerID INT,
    ReviewDate DATE NOT NULL,
    Rating INT CHECK(Rating >= 1 AND Rating <= 5),
    Comments TEXT,
    FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
    FOREIGN KEY (ReviewerID) REFERENCES Employees(EmployeeID)
);



//API Implementation (Node.js + Express)


const express = require('express');
const app = express();
const bodyParser = require('body-parser');

app.use(bodyParser.json());

const employees = require('./routes/employees');
const departments = require('./routes/departments');
const roles = require('./routes/roles');
const reviews = require('./routes/reviews');

app.use('/employees', employees);
app.use('/departments', departments);
app.use('/roles', roles);
app.use('/reviews', reviews);

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));


// routes/employees.js

const express = require('express');
const router = express.Router();

// Mock data for demonstration
let employees = [
    { id: 1, firstName: 'John', lastName: 'Doe', email: 'john.doe@example.com', departmentId: 1, roleId: 1 }
];

// GET all employees
router.get('/', (req, res) => {
    res.json(employees);
});

// GET employee by ID
router.get('/:id', (req, res) => {
    const employee = employees.find(e => e.id === parseInt(req.params.id));
    if (employee) {
        res.json(employee);
    } else {
        res.status(404).send('Employee not found');
    }
});

// POST new employee
router.post('/', (req, res) => {
    const newEmployee = { id: employees.length + 1, ...req.body };
    employees.push(newEmployee);
    res.status(201).json(newEmployee);
});

// PUT update employee by ID
router.put('/:id', (req, res) => {
    const index = employees.findIndex(e => e.id === parseInt(req.params.id));
    if (index !== -1) {
        employees[index] = { id: parseInt(req.params.id), ...req.body };
        res.json(employees[index]);
    } else {
        res.status(404).send('Employee not found');
    }
});

// DELETE employee by ID
router.delete('/:id', (req, res) => {
    const index = employees.findIndex(e => e.id === parseInt(req.params.id));
    if (index !== -1) {
        employees.splice(index, 1);
        res.status(204).send();
    } else {
        res.status(404).send('Employee not found');
    }
});

module.exports = router;



//Frontend: Web Interface


import React, { useState, useEffect } from 'react';
import axios from 'axios';

const EmployeeList = () => {
    const [employees, setEmployees] = useState([]);

    useEffect(() => {
        axios.get('/employees')
            .then(response => setEmployees(response.data))
            .catch(error => console.error('Error fetching employees:', error));
    }, []);

    return (
        <div>
            <h1>Employee List</h1>
            <table>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Email</th>
                        <th>Department</th>
                        <th>Role</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {employees.map(employee => (
                        <tr key={employee.id}>
                            <td>{employee.id}</td>
                            <td>{employee.firstName}</td>
                            <td>{employee.lastName}</td>
                            <td>{employee.email}</td>
                            <td>{employee.departmentId}</td>
                            <td>{employee.roleId}</td>
                            <td>
                                <button>Edit</button>
                                <button>Delete</button>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    );
};

export default EmployeeList;



//RBAC Middleware


const rbac = (roles) => (req, res, next) => {
    const userRole = req.user.role; // Assume req.user is set after authentication
    if (roles.includes(userRole)) {
        next();
    } else {
        res.status(403).send('Access forbidden: Insufficient rights');
    }
};

module.exports = rbac;


//Applying RBAC Middleware


const express = require('express');
const router = express.Router();
const rbac = require('./middleware/rbac');

// Example protected route
router.post('/employees', rbac(['HR Manager']), (req, res) => {
    // Logic for adding an employee
});

module.exports = router;
